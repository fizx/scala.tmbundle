<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>saveActiveFile</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby

class Array
  def yoink!(&amp;block)
    yoinked = select(&amp;block)
    reject!(&amp;block)
    yoinked
  end
end

class String
  def package_base
    self[/import (.+)\.(.+?)/, 1]
  end
  
  def import
    self[/import (.+)/, 1]
  end
end

lines = []
while line = STDIN.gets
  lines &lt;&lt; line.chomp
end

# preprocess multiline imports
prev = nil
pi = 0
lines.each_with_index do |line, i|
  if prev =~ /^import.+\{/ &amp;&amp; !prev.include?("}")
    puts line.inspect
    lines[pi] = prev + "\n" + line
    lines[i] = nil
    if line.include?("}")          
      prev = line
      pi = i
    end
  else
    prev = line
    pi = i
  end
end
lines = lines.compact

packages = lines.yoink!{|line| line =~ /^package\b/ }   
javas = lines.yoink!{|line| line =~ /^import\s+java\b/ }.sort.uniq
scalas = lines.yoink!{|line| line =~ /^import\s+scala\b/ }.sort.uniq

imports = lines.yoink!{|line| line =~ /^import\b/ }.sort.uniq

package_name = packages.first &amp;&amp; packages.first[/package\s+(.*)/, 1]

# Attempt to reify relative imports
imports.each_with_index {|line, i| 
  unless %w[com org net].include?(line[/^import\s+(\w+)/, 1])
    no = packages.length + javas.length + scalas.length + 4 + i
    STDERR.puts "\033[33mWARN: #{name}##{no}: Relative import: #{line.import}\033[0m"
    imports[i] = line.gsub(/import /, "import #{package_name}.") if package_name
  end
}

# Attempt to roll up entries duplicated by a wildcard entry
wildcards = imports.select{|line| line =~ /_$/ }
set = wildcards.inject({}) { |hash, line|
  hash[line.package_base] = true
  hash
}
    
other = imports.reject{|line| line =~ /_$/ }

other.reject! {|line|
  if set[line.package_base] 
    STDERR.puts "\033[33mWARN: #{name}: #{line.import} is covered by wildcard\033[0m"
    true
  end
}
  
imports = (wildcards + other).sort.uniq

lines = packages + [""] + javas + [""] + scalas + [""] + imports + [""] + lines
content = lines.join("\n").gsub(/\n{3,}/, "\n\n")
print content</string>
	<key>input</key>
	<string>document</string>
	<key>keyEquivalent</key>
	<string>^V</string>
	<key>name</key>
	<string>Apply Style rules</string>
	<key>output</key>
	<string>replaceDocument</string>
	<key>uuid</key>
	<string>0EEFA831-C981-4244-82CD-C378937525A2</string>
</dict>
</plist>
